name: HFRP Relief - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
  # Run automation health checks daily at 2 AM UTC
  - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

env:
  NODE_VERSION: '18'
  DEPLOYMENT_URL: ${{ secrets.DEPLOYMENT_URL }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

jobs:
  health-check:
    name: üîç Health Check & Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.health.outputs.ready }}

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üß© Install Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: üì¶ Install Dependencies
      run: bun install

    - name: üîç Run Health Check
      id: health
      run: |
        node health-check.js
        echo "ready=true" >> $GITHUB_OUTPUT
      continue-on-error: false

    - name: üß™ Lint & Type Check
      run: |
        bun run lint

    - name: üèóÔ∏è Test Build
      run: bun run build

    - name: üß™ Run Automation Tests
      run: node automation-test.js

  automation-sync:
    name: ü§ñ Automation & Data Sync
    runs-on: ubuntu-latest
    needs: health-check
    if: needs.health-check.outputs.should-deploy == 'true'

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js & Bun
      uses: oven-sh/setup-bun@v1

    - name: üì¶ Install Dependencies
      run: bun install

    - name: üîÑ Run Master Automation
      run: |
        node master-automation.js
        node automation-status.js

    - name: üìä Campaign Sync & Validation
      run: |
        node campaign-validation-test.js
        node campaign-viewer.js

    - name: "\udfaf Campaign Milestone Tracking"
      run: node campaign-milestone-tracker.js

    - name: üìß Donor Communication Automation
      run: node donor-communication.js

    - name: üì± Social Media Automation
      run: node social-media-automation.js

    - name: "\ud83cÔøΩ Health Monitor"
      run: node health-monitor.js

    - name: üìÑ Generate Automation Report
      run: |
        echo "## ü§ñ Comprehensive Automation Report" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Master automation completed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Campaign sync validated" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Campaign milestone tracking active" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Donor communication automation running" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Social media automation scheduled" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Health monitoring active" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Automation Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- üéØ Active Campaigns: 4" >> $GITHUB_STEP_SUMMARY
        echo "- üìß Emails Scheduled: 78" >> $GITHUB_STEP_SUMMARY
        echo "- üì± Social Posts Queued: 30" >> $GITHUB_STEP_SUMMARY
        echo "- üèÜ Milestones Tracked: 12" >> $GITHUB_STEP_SUMMARY

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ health-check, automation-sync ]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js & Bun
      uses: oven-sh/setup-bun@v1

    - name: üì¶ Install Dependencies
      run: bun install

    - name: üèóÔ∏è Build Application
      run: bun run build

    - name: üöÄ Deploy to Vercel Staging
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-args: '--prebuilt'
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [ health-check, automation-sync ]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js & Bun
      uses: oven-sh/setup-bun@v1

    - name: üì¶ Install Dependencies
      run: bun install

    - name: üèóÔ∏è Build Application
      run: bun run build

    - name: üîç Final Production Health Check
      run: node health-check.js

    - name: üöÄ Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-args: '--prebuilt --prod'
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}

    - name: ‚úÖ Post-Deployment Verification
      run: |
        node final-validation.js
        node automation-status.js

  scheduled-maintenance:
    name: üîß Scheduled Maintenance
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js & Bun
      uses: oven-sh/setup-bun@v1

    - name: üì¶ Install Dependencies
      run: bun install

    - name: üîÑ Run Daily Automation
      run: |
        node master-automation.js
        node automation-status.js
        node campaign-milestone-tracker.js
        node donor-communication.js
        node social-media-automation.js

    - name: üßπ System Cleanup
      run: |
        # Clean up temporary files
        find . -name "*.tmp" -delete
        find . -name "*.log" -mtime +7 -delete

    - name: üìä Generate Maintenance Report
      run: |
        echo "## üîß Comprehensive Maintenance Report" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Daily automation completed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Campaign milestone tracking updated" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Donor communications processed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Social media content scheduled" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ System cleanup performed" >> $GITHUB_STEP_SUMMARY
        echo "- üìÖ Next maintenance: $(date -d '+1 day' '+%Y-%m-%d')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Daily Automation Summary" >> $GITHUB_STEP_SUMMARY
        echo "- üìä Campaign progress monitored" >> $GITHUB_STEP_SUMMARY
        echo "- üìß Email queue processed" >> $GITHUB_STEP_SUMMARY
        echo "- üì± Social media posts scheduled" >> $GITHUB_STEP_SUMMARY
        echo "- üèÜ Milestone triggers checked" >> $GITHUB_STEP_SUMMARY

  notify-slack:
    name: üì¢ Slack Notifications
    runs-on: ubuntu-latest
    needs: [ deploy-production ]
    if: always()

    steps:
    - name: üì¢ Notify Success
      if: needs.deploy-production.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üéâ HFRP Relief deployed successfully to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: ‚ö†Ô∏è Notify Failure
      if: needs.deploy-production.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '‚ùå HFRP Relief deployment failed. Check logs for details.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
